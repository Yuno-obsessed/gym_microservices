version: '3.9'
services:
  auth-service:
    build: AuthService/
    ports:
      - "8081:8081"
    env_file:
      - AuthService/.env
# Starts only when database is started and migrations are up
    depends_on:
      postgres:
        condition: service_started
      flyway:
        condition: service_completed_successfully
  user-service:
    build: UserService/
    ports:
      - "8082:8082"
    env_file:
      - UserService/.env
# Starts only when auth is started -> database is up and running
    depends_on:
      auth-service:
        condition: service_started
  mail-service:
    build: MailService/
    ports:
      - "8083:8083"
    env_file:
      - MailService/.env
# Is independent, so starts if a database is up and running
    depends_on:
      postgres:
        condition: service_started
      flyway:
        condition: service_completed_successfully
  upload-service:
    build: UploadService/
    ports:
      - "8084:8084"
    env_file:
      - UploadService/.env
# Starts only when minio and database with migrations are up and running
    depends_on:
      minio:
        condition: service_started
      postgres:
        condition: service_started
      flyway:
        condition: service_completed_successfully
  subscription-service:
    build: SubscriptionService/
    ports:
      - "8085:8085"
    env_file:
      - SubscriptionService/.env
# Starts only when other services are up and running
    depends_on:
      auth-service:
        condition: service_started
      mail-service:
        condition: service_started
      upload-service:
        condition: service_started
  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 10s
      retries: 1000000
    volumes:
      - ./postgres-data/:/var/lib/postgresql/data
  flyway:
    image: flyway/flyway:latest
    env_file:
      - .env
    command: -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB} -schemas=public -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -connectRetries=60 migrate
    depends_on:
      postgres:
        condition: service_started
    restart: on-failure
    volumes:
      - ./db/migration:/flyway/sql
  prometheus:
    image: bitnami/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
volumes:
  postgres-data:
  prometheus-data: